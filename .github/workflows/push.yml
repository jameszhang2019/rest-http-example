name: OpenShift CI/CD Pipeline with Image Build

on:
  push:
    branches:
      - sb-2.5.x

jobs:
  sonar-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - 'src/**'
      - name: Setup Java JDK
        if: steps.changes.outputs.src == 'true'
        uses: actions/setup-java@v2.3.1
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'
      - name: Run SonarQube Analysis
        if: steps.changes.outputs.src == 'true'
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run:
#         mvn -B -U clean compile sonar:sonar -Dsonar.projectKey=rest-http-example -Dsonar.organization=jameszhang2019 -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }} -Dsonar.qualitygate.wait=true -Dsonar.coverage.exclusions=**/*
          mvn -B -U clean compile sonar:sonar \
            -Dsonar.projectKey=rest-http-example \
            -Dsonar.organization=jameszhang2019 \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.qualitygate.wait=true \
            -Dsonar.coverage.exclusions=**/*

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: sonar-analysis
    if: success() # Continue only if the previous job succeeded (Quality Gate passed)
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build and push Docker image
        env:
          REGISTRY_USER: ${{ secrets.REGISTRY_USER }}
          REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
        run: |
          echo $REGISTRY_PASSWORD | docker login -u $REGISTRY_USER --password-stdin
          docker build --tag rest-http-example .
          docker tag rest-http-example:latest jameszhang2019/rest-http-example:latest
          docker push jameszhang2019/rest-http-example:latest

      - name: Set up OpenShift CLI
        run: |
          curl -LO "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable/openshift-client-linux.tar.gz"
          tar -xvf openshift-client-linux.tar.gz
          sudo mv oc /usr/local/bin/

      - name: Login to OpenShift
        env:
          OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
          OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
        run: |
          oc login --server=$OPENSHIFT_SERVER --token=$OPENSHIFT_TOKEN

      - name: OpenShift Set OPENSHIFT_PROJECT_NAME
        run: |
          oc project ${{ secrets.OPENSHIFT_PROJECT_NAME }}

      - name: OpenShift Update Deployment with New Image
        run: |
          oc set image deployment/rest-http-example rest-http-example=docker.io/jameszhang2019/rest-http-example:latest

      - name: OpenShift Rollout restart deployment
        run: |
          oc rollout restart deployment/rest-http-example
